{% macro containerBlock(title, cta, description, body, class = null) %}
  <div class="container-block {{ class }}">
    {% if title is not empty or cta is not empty %}
      <div class="container-block-header">
        <span class="container-block-title">{{ title|title }}</span>
        <span class="container-block-cta">{{ cta|raw }}</span>
      </div>
    {% endif %}
    {% if description is not empty %}
      <div class="container-block-subheader">
        <span class="container-block-description">{{ description }}</span>
      </div>
    {% endif %}
    {% if body is not empty %}
      <div class="container-block-body">{{ body|raw }}</div>
    {% endif %}
  </div>
{% endmacro %}

{% macro containerBlockToggle(id, title, body, class = null) %}
  <div class="container-block js-toggle-container {{ class }}" id="{{ id }}">
    <div class="container-block-header">
      <span class="container-block-title js-toggle-button">
        <span class="ledger-icons ledger-icon-chevron-down"></span>
        {{ title|title }}
      </span>
    </div>
    <div class="container-block-body js-toggle-content hide">
      {{ body|raw }}
    </div>
  </div>
{% endmacro %}

{% macro renderTable(titles, rows, isBordered = true, class = null, rowsClass = null, id = null, data = {}) %}
  <div class="settings-content-table {{ class }}"
    {% if id %}
      id="{{ id }}"
    {% endif %}

    {% for key, value in data %}
      data-{{ key }}="{{ value }}"
    {% endfor %}
    >
    <table class="settings-content-table-block {% if isBordered %}is-bordered{% endif %}">
      <thead class="settings-content-table-header">
        {% for title in titles %}
          {{ title|raw }}
        {% endfor %}
      </thead>

      <tbody class="settings-content-table-rows {{ rowsClass }}">
        {% for row in rows %}
          {{ row|raw }}
        {% endfor %}
      </tbody>
    </table>
  </div>
{% endmacro %}

{% macro renderRow(items, data = {}, class = null) %}
  <tr class="settings-content-table-item {{ class }}"
    {% for key, value in data %}
      data-{{ key }}="{{ value }}"
    {% endfor %}
  >
    {% for item in items %}
      {{ item|raw }}
    {% endfor %}
  </tr>
{% endmacro %}

{% macro renderDragIcon(isHeader = false, class = null) %}
  <{% if isHeader %}th{% else %}td{% endif %} class="settings-content-table-item-drag-icon {% if isHeader %}is-header{% endif %} {{ class }}">
    {% if not isHeader %}
      <i class="ledger-icons ledger-icon-drag-handle drag-handle"></i>
    {% endif %}
  </{% if isHeader %}th{% else %}td{% endif %}>
{% endmacro %}

{% macro renderColumnCustom(items, isHeader = false, class = null) %}
  <{% if isHeader %}th{% else %}td{% endif %} class="settings-content-table-item-custom {% if isHeader %}is-header{% endif %} {{ class }}">
    {% for item in items %}
      {{ item|raw }}
    {% endfor %}
  </{% if isHeader %}th{% else %}td{% endif %}>
{% endmacro %}

{% macro renderLabel(items, isHeader = false, class = null) %}
  <{% if isHeader %}th{% else %}td{% endif %} class="settings-content-table-item-label {% if isHeader %}is-header{% endif %} {{ class }}">
    {% for item in items %}
      {{ item|raw }}
    {% endfor %}
  </{% if isHeader %}th{% else %}td{% endif %}>
{% endmacro %}

{% macro addLabel(label, class = null) %}
  <div class="settings-content-table-item-label-content {{ class }}">{{ label|raw }}</div>
{% endmacro %}

{% macro addLabelIcon(icon, isHeader = false) %}
  <div class="settings-content-table-item-icon">
    {% if not isHeader %}
      <i class="{{ icon }}"></i>
    {% endif %}
  </div>
{% endmacro %}

{% macro renderColumn(items, isHeader = false, isClass = null, class = null, ignore = false) %}
  {% if not ignore %}
    <{% if isHeader %}th{% else %}td{% endif %} class="settings-content-table-item-column {% if isHeader %}is-header{% endif %} {{ isClass }} {{ class }}">
      {% for item in items %}
        {{ item|raw }}
      {% endfor %}
    </{% if isHeader %}th{% else %}td{% endif %}>
  {% endif %}
{% endmacro %}

{% macro renderColumnNarrow(items, isHeader = false, class = null, ignore = false) %}
  {{ _self.renderColumn(items, isHeader, 'is-narrow', class, ignore) }}
{% endmacro %}

{% macro renderColumnLong(items, isHeader = false, class = null, ignore = false) %}
  {{ _self.renderColumn(items, isHeader, 'is-long', class, ignore) }}
{% endmacro %}

{% macro addColumnHtml(html) %}
  {{ html|raw }}
{% endmacro %}

{% macro addColumnHelpIcon(icon, title) %}
  <span class="help-icon" data-toggle="tooltip" data-placement="top" title="{{ title }}">
    <i class="{{ icon }}"></i>
  </span>
{% endmacro %}

{% macro renderActions(actions = [], length = null, class = null) %}
  <td class="settings-content-table-item-actions {{ class }}" data-colspan="{{ length|default(actions|length) }}">
    {% for action in actions %}
      {{ action|raw }}
    {% endfor %}
  </td>
{% endmacro %}

{% macro addActionGroup(actions, hide = false, class = null) %}
  <div class="{{ class }} {% if hide %}hide{% endif %}">
    {% for action in actions %}
      {{ action|raw }}
    {% endfor %}
  </div>
{% endmacro %}

{% macro addActionRedirect(title, icon, endpoint, class = null, ignore = false) %}
  {% import '@SymfonyAdmin/macros.html.twig' as UI %}

  {% if not ignore %}
    {{ UI.link({
      iCss: icon,
      iTooltip: {
        title: title
      },
      class: 'settings-content-table-item-action-icon',
      aCss: class,
      path: endpoint
    }) }}
  {% endif %}
{% endmacro %}

{% macro addActionLink(title, icon, endpoint, data = {}, class = null, ignore = false) %}
  {% import '@SymfonyAdmin/macros.html.twig' as UI %}

  {% if not ignore %}
    {{ UI.link({
      iCss: icon,
      iTooltip: {
        title: title
      },
      class: 'settings-content-table-item-action-icon',
      aCss: class,
      data: data|merge({
        endpoint: endpoint
      })
    }) }}
  {% endif %}
{% endmacro %}

{% macro addActionModal(title, icon, endpoint, data = {}, ignore = false) %}
  {% import '@SymfonyAdmin/macros.html.twig' as UI %}

  {% if not ignore %}
    {{ UI.link({
      iCss: icon,
      iTooltip: {
        title: title
      },
      class: 'settings-content-table-item-action-icon',
      aCss: 'js-entity-modal',
      data: data|merge({
        endpoint: endpoint
      })
    }) }}
  {% endif %}
{% endmacro %}

{% macro addActionModalTemplate(title, icon, template, arguments, ignore = false) %}
  {% import '@SymfonyAdmin/macros.html.twig' as UI %}

  {% if not ignore %}
    {{ UI.link({
      iCss: icon,
      iTooltip: {
        title: title
      },
      class: 'settings-content-table-item-action-icon',
      aCss: 'js-entity-modal-template',
      data: {
        template: template,
        arguments: arguments|json_encode
      }
    }) }}
  {% endif %}
{% endmacro %}

{% macro addActionToggleObject(title, icon, data = {}, ignore = false) %}
  {% import '@SymfonyAdmin/macros.html.twig' as UI %}

  {% if not ignore %}
    {{ UI.link({
      iCss: icon,
      iTooltip: {
        title: title
      },
      class: 'settings-content-table-item-action-icon',
      aCss: 'js-toggle-object',
      data: data
    }) }}
  {% endif %}
{% endmacro %}

{% macro renderUserLabel(user, includeEmail = true, userUrl = null) %}
  {% import '@SymfonyAdmin/macros.html.twig' as UI %}

  {% if userUrl is null %}
    {% set userUrl = path('admin_settings_users_profile_edit', {id: user.id}) %}
  {% endif %}

  <div class="settings-content-company-user-list-item-thumbnail media">
    <span class="settings-content-company-user-picture media-left">
      {{ UI.profileImageComponentEntity(user) }}
    </span>
    <div class="settings-content-main-content media-body">
      {% if userUrl is not empty %}
        <a href="{{ userUrl }}" class="settings-content-company-user-text name">{{ user }}</a>
      {% else %}
        <div class="settings-content-company-user-text name">{{ user }}</div>
      {% endif %}

      {% if includeEmail %}
        <div class="settings-content-secondary-content email">{{ user.email }}</div>
      {% endif %}
    </div>
  </div>
{% endmacro %}
